// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//
// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	task_manager "task_manager"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user task_manager.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GetUserId mocks base method.
func (m *MockAuthorization) GetUserId(username, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", username, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *MockAuthorizationMockRecorder) GetUserId(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*MockAuthorization)(nil).GetUserId), username, password)
}

// MockTaskManagerTask is a mock of TaskManagerTask interface.
type MockTaskManagerTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskManagerTaskMockRecorder
}

// MockTaskManagerTaskMockRecorder is the mock recorder for MockTaskManagerTask.
type MockTaskManagerTaskMockRecorder struct {
	mock *MockTaskManagerTask
}

// NewMockTaskManagerTask creates a new mock instance.
func NewMockTaskManagerTask(ctrl *gomock.Controller) *MockTaskManagerTask {
	mock := &MockTaskManagerTask{ctrl: ctrl}
	mock.recorder = &MockTaskManagerTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskManagerTask) EXPECT() *MockTaskManagerTaskMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskManagerTask) Create(userId int, task task_manager.CreateTaskInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskManagerTaskMockRecorder) Create(userId, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskManagerTask)(nil).Create), userId, task)
}

// Delete mocks base method.
func (m *MockTaskManagerTask) Delete(userId, taskId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskManagerTaskMockRecorder) Delete(userId, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskManagerTask)(nil).Delete), userId, taskId)
}

// GetAll mocks base method.
func (m *MockTaskManagerTask) GetAll(userId int) ([]task_manager.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userId)
	ret0, _ := ret[0].([]task_manager.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTaskManagerTaskMockRecorder) GetAll(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTaskManagerTask)(nil).GetAll), userId)
}

// GetById mocks base method.
func (m *MockTaskManagerTask) GetById(userId, taskId int) (task_manager.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId, taskId)
	ret0, _ := ret[0].(task_manager.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTaskManagerTaskMockRecorder) GetById(userId, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTaskManagerTask)(nil).GetById), userId, taskId)
}

// Update mocks base method.
func (m *MockTaskManagerTask) Update(userId, taskId int, input task_manager.UpdateTaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, taskId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskManagerTaskMockRecorder) Update(userId, taskId, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskManagerTask)(nil).Update), userId, taskId, input)
}
